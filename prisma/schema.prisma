generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  fullName       String?
  email          String         @unique
  password       String?
  avatar         String         @default("https://res.cloudinary.com/dowc5iu9c/image/upload/v1735754490/avatar/default-avatar.png")
  isVerified     Boolean        @default(false)
  role           Role           @default(CUSTOMER)
  token          String?
  tokenExpiresIn DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isDeleted      Boolean        @default(false)
  deletedAt      DateTime?
  Address        Address[]
  Employee       Employee?
  Notification   Notification[]
}

model Employee {
  id                 Int                  @id @default(autoincrement())
  workShift          EmployeeWorkShift?
  userId             Int                  @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  isDeleted          Boolean              @default(false)
  deletedAt          DateTime?
  station            WorkerStation?
  isWorking          Boolean              @default(false)
  employmentStatus   EmploymentStatus     @default(EMPLOYED)
  outletId           Int
  isPresent          Boolean              @default(false)
  outlet             Outlet               @relation(fields: [outletId], references: [id])
  user               User                 @relation(fields: [userId], references: [id])
  EmployeeAttendance EmployeeAttendance[]
  LaundryJob         LaundryJob[]
  TransportJob       TransportJob[]
}

model Address {
  id          Int       @id @default(autoincrement())
  isPrimary   Boolean   @default(false)
  addressLine String
  province    String
  regency     String
  district    String
  village     String
  latitude    String
  longitude   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  customerId  Int?
  customer    User?     @relation(fields: [customerId], references: [id])
  Order       Order[]
  Outlet      Outlet?
}

model Outlet {
  id              Int        @id @default(autoincrement())
  outletName      String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  isDeleted       Boolean    @default(false)
  deletedAt       DateTime?
  outletAddressId Int        @unique
  Employee        Employee[]
  Order           Order[]
  outletAddress   Address    @relation(fields: [outletAddressId], references: [id])
}

model Order {
  id                Int            @id @default(autoincrement())
  orderStatus       OrderStatus    @default(WAITING_FOR_DELIVERY_DRIVER)
  isPaid            Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  isDeleted         Boolean        @default(false)
  deletedAt         DateTime?
  customerAddressId Int
  laundryPrice      Int?
  laundryWeight     Int?
  outletId          Int
  LaundryJob        LaundryJob[]
  customerAddress   Address        @relation(fields: [customerAddressId], references: [id])
  outlet            Outlet         @relation(fields: [outletId], references: [id])
  OrderItem         OrderItem[]
  Payment           Payment?
  TransportJob      TransportJob[]
}

model OrderItem {
  id            Int       @id @default(autoincrement())
  qty           Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  orderId       Int?
  orderItemName String
  order         Order?    @relation(fields: [orderId], references: [id])
}

model LaundryJob {
  id                Int           @id @default(autoincrement())
  isCompleted       Boolean       @default(false)
  byPassNote        String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  isDeleted         Boolean       @default(false)
  deletedAt         DateTime?
  orderId           Int
  workerId          Int?
  byPassStatus      ByPassStatus?
  isByPassRequested Boolean       @default(false)
  station           WorkerStation
  order             Order         @relation(fields: [orderId], references: [id])
  worker            Employee?     @relation(fields: [workerId], references: [id])
}

model TransportJob {
  id            Int           @id @default(autoincrement())
  transportType TransportType
  isCompleted   Boolean       @default(false)
  distance      Int
  orderId       Int
  driverId      Int?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  isDeleted     Boolean       @default(false)
  deletedAt     DateTime?
  driver        Employee?     @relation(fields: [driverId], references: [id])
  order         Order         @relation(fields: [orderId], references: [id])
}

model Notification {
  id          Int       @id @default(autoincrement())
  isRead      Boolean   @default(false)
  title       String
  description String
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  url         String?
  user        User      @relation(fields: [userId], references: [id])
}

model Payment {
  id              Int           @id @default(autoincrement())
  totalPrice      Int
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  snapToken       String?
  snapRedirectURL String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isDeleted       Boolean       @default(false)
  deletedAt       DateTime?
  orderId         Int           @unique
  order           Order         @relation(fields: [orderId], references: [id])
}

model EmployeeAttendance {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  isDeleted        Boolean            @default(false)
  deletedAt        DateTime?
  employeeId       Int
  isAttended       Boolean            @default(false)
  canClockIn       Boolean            @default(false)
  AttendanceRecord AttendanceRecord[]
  employee         Employee           @relation(fields: [employeeId], references: [id])
}

model AttendanceRecord {
  id                   Int                @id @default(autoincrement())
  attendanceType       AttendanceType
  employeeAttendanceId Int
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  isDeleted            Boolean            @default(false)
  deletedAt            DateTime?
  employeeAttendance   EmployeeAttendance @relation(fields: [employeeAttendanceId], references: [id])
}

enum Role {
  SUPER_ADMIN
  OUTLET_ADMIN
  WORKER
  DRIVER
  CUSTOMER
}

enum EmployeeWorkShift {
  MORNING
  NOON
  NIGHT
}

enum EmploymentStatus {
  EMPLOYED
  PAUSED
  ENDED
}

enum WorkerStation {
  WASHING
  IRONING
  PACKING
}

enum OrderStatus {
  ARRIVED_AT_OUTLET
  READY_FOR_WASHING
  BEING_WASHED
  WASHING_COMPLETED
  BEING_IRONED
  IRONING_COMPLETED
  BEING_PACKED
  AWAITING_PAYMENT
  READY_FOR_DELIVERY
  WAITING_FOR_DELIVERY_DRIVER
  BEING_DELIVERED_TO_CUSTOMER
  RECEIVED_BY_CUSTOMER
  COMPLETED
  CANCELLED_BY_CUSTOMER
  CANCELLED_BY_OUTLET
  WAITING_FOR_PICKUP_DRIVER
  ON_THE_WAY_TO_CUSTOMER
  ON_THE_WAY_TO_OUTLET
}

enum TransportType {
  PICKUP
  DELIVERY
}

enum PaymentStatus {
  PENDING
  CANCELLED
  EXPIRED
  SUCCEEDED
}

enum ByPassStatus {
  ACCEPTED
  REJECTED
}

enum AttendanceType {
  CLOCK_IN
  CLOCK_OUT
}
